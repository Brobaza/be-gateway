// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.3
// source: auth.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'authProtoService';

export interface GetPublicKeyDTO {
  key: string;
}

export interface PublicKeyResp {
  key: string;
}

export interface LogoutDTO {
  userId: string;
  sessionId: string;
  token: string;
}

export interface StatusDTO {
  message: string;
  code: string;
  errMessage: string;
}

export interface SessionDTO {
  id: string;
  type: string;
}

export interface TokenDTO {
  token: string;
}

export interface VerifyRespDTO {
  id: string;
  decodedUserId: string;
}

export interface VerifyResp {
  data: VerifyRespDTO | undefined;
  metadata: StatusDTO | undefined;
}

export interface LoginDTO {
  username: string;
  password: string;
}

export interface LoginRespDTO {
  accessToken: string;
  refreshToken: string;
  accessTokenExpireAt: string;
  refreshTokenExpireAt: string;
}

export interface LoginResp {
  data: LoginRespDTO | undefined;
  metadata: StatusDTO | undefined;
}

export interface RegisterDTO {
  displayName: string;
  phoneNumber: string;
  email: string;
  password: string;
  gender: string;
}

export interface RegisterRespDTO {
  accessToken: string;
  refreshToken: string;
  accessTokenExpireAt: string;
  refreshTokenExpireAt: string;
  verifyToken: string;
}

export interface RegisterResp {
  data: RegisterRespDTO | undefined;
  metadata: StatusDTO | undefined;
}

export const AUTH_PROTO_SERVICE_PACKAGE_NAME = 'authProtoService';

export interface AuthServiceClient {
  login(request: LoginDTO): Observable<LoginResp>;

  register(request: RegisterDTO): Observable<RegisterResp>;

  verifyAccessToken(request: TokenDTO): Observable<VerifyResp>;

  verifySession(request: SessionDTO): Observable<VerifyResp>;

  logout(request: LogoutDTO): Observable<StatusDTO>;

  getPublicKey(request: GetPublicKeyDTO): Observable<PublicKeyResp>;
}

export interface AuthServiceController {
  login(
    request: LoginDTO,
  ): Promise<LoginResp> | Observable<LoginResp> | LoginResp;

  register(
    request: RegisterDTO,
  ): Promise<RegisterResp> | Observable<RegisterResp> | RegisterResp;

  verifyAccessToken(
    request: TokenDTO,
  ): Promise<VerifyResp> | Observable<VerifyResp> | VerifyResp;

  verifySession(
    request: SessionDTO,
  ): Promise<VerifyResp> | Observable<VerifyResp> | VerifyResp;

  logout(
    request: LogoutDTO,
  ): Promise<StatusDTO> | Observable<StatusDTO> | StatusDTO;

  getPublicKey(
    request: GetPublicKeyDTO,
  ): Promise<PublicKeyResp> | Observable<PublicKeyResp> | PublicKeyResp;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'login',
      'register',
      'verifyAccessToken',
      'verifySession',
      'logout',
      'getPublicKey',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
