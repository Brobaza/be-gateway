// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.1
// source: post.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "postProtoService";

export interface GetListPostRequest {
  userId: string;
  limit: number;
  page: number;
}

export interface CreatePostRequest {
  authorId: string;
  content: string;
  hashtags: string[];
  links: string[];
  taggedUserIds: string[];
  images: string[];
  postParentId: string;
  postType: string;
}

export interface GetPostByUserIdRequest {
  userId: string;
}

export interface GetPostOnDashBoardReq {
  userId: string;
  limit: number;
  page: number;
}

export interface ListPostResponse {
  postResponse: CreatePostResponse[];
  metadata: MetaData | undefined;
}

export interface CreatePostReactionRequest {
  postId: string;
  userId: string;
  reactionType: string;
}

export interface UpdatePostRequest {
  authorId: string;
  content: string;
  hashtags: string[];
  links: string[];
  taggedUserIds: string[];
  images: string[];
  postParentId: string;
  postId: string;
  postType: string;
}

export interface CreatePostResponse {
  authorId: string;
  content: string;
  hashtags: string[];
  links: string[];
  taggedUserIds: string[];
  images: string[];
  postParentId: string;
  postId: string;
  postType: string;
  metaData: MetaData | undefined;
}

export interface Post {
  id: string;
  authorId: string;
}

export interface GetListPostResponse {
  listPost: Post[];
  total: number;
}

export interface TestPostRequest {
  name: string;
  email: string;
  message: string;
}

export interface TestPostResponse {
  name: string;
  email: string;
  message: string;
}

export interface GetListPostOnOtherUserReq {
  userId: string;
  friendId: string;
}

export interface MetaData {
  respcode: string;
  message: string;
}

export interface CreateCommentRequest {
  authorId: string;
  content: string;
  hashtags: string[];
  links: string[];
  taggedUserIds: string[];
  images: string[];
  commentParentId: string;
  postId: string;
}

export interface UpdateCommentRequest {
  authorId: string;
  content: string;
  hashtags: string[];
  links: string[];
  taggedUserIds: string[];
  images: string[];
  commentParentId: string;
  postId: string;
  commentId: string;
}

export interface CreateCommentResponse {
  authorId: string;
  content: string;
  hashtags: string[];
  links: string[];
  taggedUserIds: string[];
  images: string[];
  commentParentId: string;
  postId: string;
  commentId: string;
  metaData: MetaData | undefined;
}

export interface GetListCommentRequest {
  postId: string;
}

export interface ListCommentResponse {
  comments: CreateCommentResponse[];
  metadata: MetaData | undefined;
}

export interface CreateCommentReactionRequest {
  commentId: string;
  userId: string;
  reactionType: string;
}

export const POST_PROTO_SERVICE_PACKAGE_NAME = "postProtoService";

export interface PostServiceClient {
  /** post */

  testPost(request: TestPostRequest): Observable<TestPostResponse>;

  getListPost(request: GetListPostRequest): Observable<GetListPostResponse>;

  createPost(request: CreatePostRequest): Observable<CreatePostResponse>;

  updatePost(request: UpdatePostRequest): Observable<CreatePostResponse>;

  getListPostByUserId(request: GetPostByUserIdRequest): Observable<ListPostResponse>;

  getListPostOnOtherUser(request: GetListPostOnOtherUserReq): Observable<ListPostResponse>;

  getListPostOnDashBoard(request: GetPostOnDashBoardReq): Observable<ListPostResponse>;

  createReactionPost(request: CreatePostReactionRequest): Observable<MetaData>;

  /** comment */

  updateComment(request: UpdateCommentRequest): Observable<CreateCommentResponse>;

  createComment(request: CreateCommentRequest): Observable<CreateCommentResponse>;

  getListComment(request: GetListCommentRequest): Observable<ListCommentResponse>;

  createReactionComment(request: CreateCommentReactionRequest): Observable<MetaData>;
}

export interface PostServiceController {
  /** post */

  testPost(request: TestPostRequest): Promise<TestPostResponse> | Observable<TestPostResponse> | TestPostResponse;

  getListPost(
    request: GetListPostRequest,
  ): Promise<GetListPostResponse> | Observable<GetListPostResponse> | GetListPostResponse;

  createPost(
    request: CreatePostRequest,
  ): Promise<CreatePostResponse> | Observable<CreatePostResponse> | CreatePostResponse;

  updatePost(
    request: UpdatePostRequest,
  ): Promise<CreatePostResponse> | Observable<CreatePostResponse> | CreatePostResponse;

  getListPostByUserId(
    request: GetPostByUserIdRequest,
  ): Promise<ListPostResponse> | Observable<ListPostResponse> | ListPostResponse;

  getListPostOnOtherUser(
    request: GetListPostOnOtherUserReq,
  ): Promise<ListPostResponse> | Observable<ListPostResponse> | ListPostResponse;

  getListPostOnDashBoard(
    request: GetPostOnDashBoardReq,
  ): Promise<ListPostResponse> | Observable<ListPostResponse> | ListPostResponse;

  createReactionPost(request: CreatePostReactionRequest): Promise<MetaData> | Observable<MetaData> | MetaData;

  /** comment */

  updateComment(
    request: UpdateCommentRequest,
  ): Promise<CreateCommentResponse> | Observable<CreateCommentResponse> | CreateCommentResponse;

  createComment(
    request: CreateCommentRequest,
  ): Promise<CreateCommentResponse> | Observable<CreateCommentResponse> | CreateCommentResponse;

  getListComment(
    request: GetListCommentRequest,
  ): Promise<ListCommentResponse> | Observable<ListCommentResponse> | ListCommentResponse;

  createReactionComment(request: CreateCommentReactionRequest): Promise<MetaData> | Observable<MetaData> | MetaData;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "testPost",
      "getListPost",
      "createPost",
      "updatePost",
      "getListPostByUserId",
      "getListPostOnOtherUser",
      "getListPostOnDashBoard",
      "createReactionPost",
      "updateComment",
      "createComment",
      "getListComment",
      "createReactionComment",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const POST_SERVICE_NAME = "PostService";
